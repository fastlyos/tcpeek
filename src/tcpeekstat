#!/usr/bin/env python
# coding: utf-8
import os
import sys
import argparse
import socket
import json

socket_file = '/var/run/tcpeek/tcpeek.sock'
gmetric = '/usr/bin/gmetric'
use_gmetric = False
use_json = False

def init():
	global use_gmetric, use_json, socket_file
	parser = argparse.ArgumentParser()
	exgroup = parser.add_mutually_exclusive_group()
	exgroup.add_argument('-g', '--gmetric', dest='use_gmetric', help='exec gmetric', action='store_true')
	exgroup.add_argument('-j', '--json', dest='use_json', help='print statistics with json format', action='store_true')
	parser.add_argument('-U', '--socket', help='unix domain socket for tcpeek (default: %(default)s)', default=socket_file)
	parser.add_argument('-v', '--version', help='show version', action='version')
	args = parser.parse_args()
	socket_file = args.socket
	use_gmetric = args.use_gmetric
	use_json = args.use_json

def getstat():
	msg = str() 
	sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	sock.settimeout(3)
	try:
		sock.connect(socket_file)
		if use_gmetric:
			sock.send("REFRESH\r\n")
		else:
			sock.send("GET\r\n")
		while 1:
			chunk = sock.recv(1024)
			if chunk == '':
				break
			msg = msg + chunk
	except socket.error, e:
		print "socket.error:", e
		sys.exit()
	finally:
		sock.close()
	return msg

def exec_gmetric(stat):
	for _filter in stat:
		for name in _filter.keys():
			for section in _filter[name].keys():
				for item in _filter[name][section].keys():
					if item == 'reject' or item == 'timeout' or item == 'dupsyn' or item == 'dupsynack':
						cmd = "%s -n %s -v %u -t uint32" % (gmetric, '_'.join(["tcpeek", name, section, item]), _filter[name][section][item])
						print cmd
						os.system(cmd)

def print_stat(stat):
	if use_json:
		print json.dumps(stat, separators=(',', ':'))
	else:
		print "====== TCPEEK SUMMARY ======"
		for _filter in stat:
			for name in _filter.keys():
				print "----------------------------"
				print " %s" % (name)
				print "----------------------------"
				for section in _filter[name].keys():
					print " %s" % (section)
					for item in _filter[name][section].keys():
						print "     %-10s %10s" % (item, _filter[name][section][item])
		print "============================"

def main():
	init()
	msg = getstat()
	#print msg
	data = json.loads(msg)
	if use_gmetric:
		exec_gmetric(data)
	else:
		print_stat(data)

if __name__ == "__main__":
	main()
